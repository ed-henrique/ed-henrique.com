// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts
  (title, content, description) VALUES
  (?1, ?2, ?3)
RETURNING id
`

type CreatePostParams struct {
	Title       string
	Content     string
	Description string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Title, arg.Content, arg.Description)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deletePost = `-- name: DeletePost :exec
UPDATE posts
SET
  removed_at = CURRENT_TIMESTAMP
WHERE id = ?1 AND removed_at IS NULL
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT title, content, description, created_at, updated_at
FROM posts
WHERE id = ?1 AND removed_at IS NULL
`

type GetPostRow struct {
	Title       string
	Content     string
	Description string
	CreatedAt   string
	UpdatedAt   sql.NullString
}

func (q *Queries) GetPost(ctx context.Context, id int64) (GetPostRow, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i GetPostRow
	err := row.Scan(
		&i.Title,
		&i.Content,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, title, content, description, created_at, updated_at
FROM posts
WHERE removed_at IS NULL
`

type ListPostsRow struct {
	ID          int64
	Title       string
	Content     string
	Description string
	CreatedAt   string
	UpdatedAt   sql.NullString
}

func (q *Queries) ListPosts(ctx context.Context) ([]ListPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPostsRow
	for rows.Next() {
		var i ListPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :exec
UPDATE posts
SET
  title = CASE
    WHEN CAST(?2 AS TEXT) = '' THEN title
    ELSE CAST(?2 AS TEXT)
  END,
  content = CASE
    WHEN CAST(?3 AS TEXT) = '' THEN content
    ELSE CAST(?3 AS TEXT)
  END,
  description = CASE
    WHEN CAST(?4 AS TEXT) = '' THEN description
    ELSE CAST(?4 AS TEXT)
  END,
  updated_at = CURRENT_TIMESTAMP
WHERE id = ?1 AND removed_at IS NULL
`

type UpdatePostParams struct {
	ID          int64
	Title       string
	Content     string
	Description string
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.ExecContext(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Content,
		arg.Description,
	)
	return err
}
